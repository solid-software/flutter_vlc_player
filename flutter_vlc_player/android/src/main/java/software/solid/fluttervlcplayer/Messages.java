// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package software.solid.fluttervlcplayer;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CreateMessage {
    private @NonNull Long playerId;

    public @NonNull Long getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull String uri;

    public @NonNull String getUri() {
      return uri;
    }

    public void setUri(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uri\" is null.");
      }
      this.uri = setterArg;
    }

    private @NonNull Long type;

    public @NonNull Long getType() {
      return type;
    }

    public void setType(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    private @NonNull Boolean autoPlay;

    public @NonNull Boolean getAutoPlay() {
      return autoPlay;
    }

    public void setAutoPlay(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"autoPlay\" is null.");
      }
      this.autoPlay = setterArg;
    }

    private @Nullable Long hwAcc;

    public @Nullable Long getHwAcc() {
      return hwAcc;
    }

    public void setHwAcc(@Nullable Long setterArg) {
      this.hwAcc = setterArg;
    }

    private @NonNull List<String> options;

    public @NonNull List<String> getOptions() {
      return options;
    }

    public void setOptions(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"options\" is null.");
      }
      this.options = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    CreateMessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      CreateMessage that = (CreateMessage) o;
      return playerId.equals(that.playerId) && uri.equals(that.uri) && type.equals(that.type) && Objects.equals(packageName, that.packageName) && autoPlay.equals(that.autoPlay) && Objects.equals(hwAcc, that.hwAcc) && options.equals(that.options);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, uri, type, packageName, autoPlay, hwAcc, options);
    }

    public static final class Builder {

      private @Nullable Long playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull Long setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable String uri;

      @CanIgnoreReturnValue
      public @NonNull Builder setUri(@NonNull String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable Boolean autoPlay;

      @CanIgnoreReturnValue
      public @NonNull Builder setAutoPlay(@NonNull Boolean setterArg) {
        this.autoPlay = setterArg;
        return this;
      }

      private @Nullable Long hwAcc;

      @CanIgnoreReturnValue
      public @NonNull Builder setHwAcc(@Nullable Long setterArg) {
        this.hwAcc = setterArg;
        return this;
      }

      private @Nullable List<String> options;

      @CanIgnoreReturnValue
      public @NonNull Builder setOptions(@NonNull List<String> setterArg) {
        this.options = setterArg;
        return this;
      }

      public @NonNull CreateMessage build() {
        CreateMessage pigeonReturn = new CreateMessage();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setUri(uri);
        pigeonReturn.setType(type);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setAutoPlay(autoPlay);
        pigeonReturn.setHwAcc(hwAcc);
        pigeonReturn.setOptions(options);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(7);
      toListResult.add(playerId);
      toListResult.add(uri);
      toListResult.add(type);
      toListResult.add(packageName);
      toListResult.add(autoPlay);
      toListResult.add(hwAcc);
      toListResult.add(options);
      return toListResult;
    }

    static @NonNull CreateMessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      CreateMessage pigeonResult = new CreateMessage();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((Long) playerId);
      Object uri = pigeonVar_list.get(1);
      pigeonResult.setUri((String) uri);
      Object type = pigeonVar_list.get(2);
      pigeonResult.setType((Long) type);
      Object packageName = pigeonVar_list.get(3);
      pigeonResult.setPackageName((String) packageName);
      Object autoPlay = pigeonVar_list.get(4);
      pigeonResult.setAutoPlay((Boolean) autoPlay);
      Object hwAcc = pigeonVar_list.get(5);
      pigeonResult.setHwAcc((Long) hwAcc);
      Object options = pigeonVar_list.get(6);
      pigeonResult.setOptions((List<String>) options);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SetMediaMessage {
    private @NonNull Long playerId;

    public @NonNull Long getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull String uri;

    public @NonNull String getUri() {
      return uri;
    }

    public void setUri(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uri\" is null.");
      }
      this.uri = setterArg;
    }

    private @NonNull Long type;

    public @NonNull Long getType() {
      return type;
    }

    public void setType(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    private @NonNull Boolean autoPlay;

    public @NonNull Boolean getAutoPlay() {
      return autoPlay;
    }

    public void setAutoPlay(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"autoPlay\" is null.");
      }
      this.autoPlay = setterArg;
    }

    private @Nullable Long hwAcc;

    public @Nullable Long getHwAcc() {
      return hwAcc;
    }

    public void setHwAcc(@Nullable Long setterArg) {
      this.hwAcc = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    SetMediaMessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      SetMediaMessage that = (SetMediaMessage) o;
      return playerId.equals(that.playerId) && uri.equals(that.uri) && type.equals(that.type) && Objects.equals(packageName, that.packageName) && autoPlay.equals(that.autoPlay) && Objects.equals(hwAcc, that.hwAcc);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, uri, type, packageName, autoPlay, hwAcc);
    }

    public static final class Builder {

      private @Nullable Long playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull Long setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable String uri;

      @CanIgnoreReturnValue
      public @NonNull Builder setUri(@NonNull String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable Boolean autoPlay;

      @CanIgnoreReturnValue
      public @NonNull Builder setAutoPlay(@NonNull Boolean setterArg) {
        this.autoPlay = setterArg;
        return this;
      }

      private @Nullable Long hwAcc;

      @CanIgnoreReturnValue
      public @NonNull Builder setHwAcc(@Nullable Long setterArg) {
        this.hwAcc = setterArg;
        return this;
      }

      public @NonNull SetMediaMessage build() {
        SetMediaMessage pigeonReturn = new SetMediaMessage();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setUri(uri);
        pigeonReturn.setType(type);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setAutoPlay(autoPlay);
        pigeonReturn.setHwAcc(hwAcc);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(6);
      toListResult.add(playerId);
      toListResult.add(uri);
      toListResult.add(type);
      toListResult.add(packageName);
      toListResult.add(autoPlay);
      toListResult.add(hwAcc);
      return toListResult;
    }

    static @NonNull SetMediaMessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      SetMediaMessage pigeonResult = new SetMediaMessage();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((Long) playerId);
      Object uri = pigeonVar_list.get(1);
      pigeonResult.setUri((String) uri);
      Object type = pigeonVar_list.get(2);
      pigeonResult.setType((Long) type);
      Object packageName = pigeonVar_list.get(3);
      pigeonResult.setPackageName((String) packageName);
      Object autoPlay = pigeonVar_list.get(4);
      pigeonResult.setAutoPlay((Boolean) autoPlay);
      Object hwAcc = pigeonVar_list.get(5);
      pigeonResult.setHwAcc((Long) hwAcc);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SpuTracksMessage {
    private @NonNull Long playerId;

    public @NonNull Long getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull Map<Object, Object> subtitles;

    public @NonNull Map<Object, Object> getSubtitles() {
      return subtitles;
    }

    public void setSubtitles(@NonNull Map<Object, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"subtitles\" is null.");
      }
      this.subtitles = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    SpuTracksMessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      SpuTracksMessage that = (SpuTracksMessage) o;
      return playerId.equals(that.playerId) && subtitles.equals(that.subtitles);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, subtitles);
    }

    public static final class Builder {

      private @Nullable Long playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull Long setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable Map<Object, Object> subtitles;

      @CanIgnoreReturnValue
      public @NonNull Builder setSubtitles(@NonNull Map<Object, Object> setterArg) {
        this.subtitles = setterArg;
        return this;
      }

      public @NonNull SpuTracksMessage build() {
        SpuTracksMessage pigeonReturn = new SpuTracksMessage();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setSubtitles(subtitles);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(playerId);
      toListResult.add(subtitles);
      return toListResult;
    }

    static @NonNull SpuTracksMessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      SpuTracksMessage pigeonResult = new SpuTracksMessage();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((Long) playerId);
      Object subtitles = pigeonVar_list.get(1);
      pigeonResult.setSubtitles((Map<Object, Object>) subtitles);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AddSubtitleMessage {
    private @NonNull Long playerId;

    public @NonNull Long getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull String uri;

    public @NonNull String getUri() {
      return uri;
    }

    public void setUri(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uri\" is null.");
      }
      this.uri = setterArg;
    }

    private @NonNull Long type;

    public @NonNull Long getType() {
      return type;
    }

    public void setType(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull Boolean isSelected;

    public @NonNull Boolean getIsSelected() {
      return isSelected;
    }

    public void setIsSelected(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isSelected\" is null.");
      }
      this.isSelected = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AddSubtitleMessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      AddSubtitleMessage that = (AddSubtitleMessage) o;
      return playerId.equals(that.playerId) && uri.equals(that.uri) && type.equals(that.type) && isSelected.equals(that.isSelected);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, uri, type, isSelected);
    }

    public static final class Builder {

      private @Nullable Long playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull Long setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable String uri;

      @CanIgnoreReturnValue
      public @NonNull Builder setUri(@NonNull String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Boolean isSelected;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsSelected(@NonNull Boolean setterArg) {
        this.isSelected = setterArg;
        return this;
      }

      public @NonNull AddSubtitleMessage build() {
        AddSubtitleMessage pigeonReturn = new AddSubtitleMessage();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setUri(uri);
        pigeonReturn.setType(type);
        pigeonReturn.setIsSelected(isSelected);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(playerId);
      toListResult.add(uri);
      toListResult.add(type);
      toListResult.add(isSelected);
      return toListResult;
    }

    static @NonNull AddSubtitleMessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      AddSubtitleMessage pigeonResult = new AddSubtitleMessage();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((Long) playerId);
      Object uri = pigeonVar_list.get(1);
      pigeonResult.setUri((String) uri);
      Object type = pigeonVar_list.get(2);
      pigeonResult.setType((Long) type);
      Object isSelected = pigeonVar_list.get(3);
      pigeonResult.setIsSelected((Boolean) isSelected);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AddAudioMessage {
    private @NonNull Long playerId;

    public @NonNull Long getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull String uri;

    public @NonNull String getUri() {
      return uri;
    }

    public void setUri(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uri\" is null.");
      }
      this.uri = setterArg;
    }

    private @NonNull Long type;

    public @NonNull Long getType() {
      return type;
    }

    public void setType(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull Boolean isSelected;

    public @NonNull Boolean getIsSelected() {
      return isSelected;
    }

    public void setIsSelected(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isSelected\" is null.");
      }
      this.isSelected = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AddAudioMessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      AddAudioMessage that = (AddAudioMessage) o;
      return playerId.equals(that.playerId) && uri.equals(that.uri) && type.equals(that.type) && isSelected.equals(that.isSelected);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, uri, type, isSelected);
    }

    public static final class Builder {

      private @Nullable Long playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull Long setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable String uri;

      @CanIgnoreReturnValue
      public @NonNull Builder setUri(@NonNull String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Boolean isSelected;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsSelected(@NonNull Boolean setterArg) {
        this.isSelected = setterArg;
        return this;
      }

      public @NonNull AddAudioMessage build() {
        AddAudioMessage pigeonReturn = new AddAudioMessage();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setUri(uri);
        pigeonReturn.setType(type);
        pigeonReturn.setIsSelected(isSelected);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(playerId);
      toListResult.add(uri);
      toListResult.add(type);
      toListResult.add(isSelected);
      return toListResult;
    }

    static @NonNull AddAudioMessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      AddAudioMessage pigeonResult = new AddAudioMessage();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((Long) playerId);
      Object uri = pigeonVar_list.get(1);
      pigeonResult.setUri((String) uri);
      Object type = pigeonVar_list.get(2);
      pigeonResult.setType((Long) type);
      Object isSelected = pigeonVar_list.get(3);
      pigeonResult.setIsSelected((Boolean) isSelected);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return CreateMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return SetMediaMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return SpuTracksMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return AddSubtitleMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return AddAudioMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CreateMessage) {
        stream.write(129);
        writeValue(stream, ((CreateMessage) value).toList());
      } else if (value instanceof SetMediaMessage) {
        stream.write(130);
        writeValue(stream, ((SetMediaMessage) value).toList());
      } else if (value instanceof SpuTracksMessage) {
        stream.write(131);
        writeValue(stream, ((SpuTracksMessage) value).toList());
      } else if (value instanceof AddSubtitleMessage) {
        stream.write(132);
        writeValue(stream, ((AddSubtitleMessage) value).toList());
      } else if (value instanceof AddAudioMessage) {
        stream.write(133);
        writeValue(stream, ((AddAudioMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface VlcPlayerApi {

    void initialize();

    void create(@NonNull CreateMessage msg);

    void dispose(@NonNull Long playerId);

    void setStreamUrl(@NonNull SetMediaMessage msg);

    void play(@NonNull Long playerId);

    void pause(@NonNull Long playerId);

    void stop(@NonNull Long playerId);

    @NonNull 
    Boolean isPlaying(@NonNull Long playerId);

    @NonNull 
    Boolean isSeekable(@NonNull Long playerId);

    void setLooping(@NonNull Long playerId, @NonNull Boolean isLooping);

    void seekTo(@NonNull Long playerId, @NonNull Long position);

    @NonNull 
    Long position(@NonNull Long playerId);

    @NonNull 
    Long duration(@NonNull Long playerId);

    void setVolume(@NonNull Long playerId, @NonNull Long volume);

    @NonNull 
    Long getVolume(@NonNull Long playerId);

    void setPlaybackSpeed(@NonNull Long playerId, @NonNull Double speed);

    @NonNull 
    Double getPlaybackSpeed(@NonNull Long playerId);

    @Nullable 
    String takeSnapshot(@NonNull Long playerId);

    @NonNull 
    Long getSpuTracksCount(@NonNull Long playerId);

    @NonNull 
    Map<Long, String> getSpuTracks(@NonNull Long playerId);

    void setSpuTrack(@NonNull Long playerId, @NonNull Long spuTrackNumber);

    @NonNull 
    Long getSpuTrack(@NonNull Long playerId);

    void setSpuDelay(@NonNull Long playerId, @NonNull Long delay);

    @NonNull 
    Long getSpuDelay(@NonNull Long playerId);

    void addSubtitleTrack(@NonNull AddSubtitleMessage msg);

    @NonNull 
    Long getAudioTracksCount(@NonNull Long playerId);

    @NonNull 
    Map<Long, String> getAudioTracks(@NonNull Long playerId);

    void setAudioTrack(@NonNull Long playerId, @NonNull Long audioTrackNumber);

    @NonNull 
    Long getAudioTrack(@NonNull Long playerId);

    void setAudioDelay(@NonNull Long playerId, @NonNull Long delay);

    @NonNull 
    Long getAudioDelay(@NonNull Long playerId);

    void addAudioTrack(@NonNull AddAudioMessage msg);

    @NonNull 
    Long getVideoTracksCount(@NonNull Long playerId);

    @NonNull 
    Map<Long, String> getVideoTracks(@NonNull Long playerId);

    void setVideoTrack(@NonNull Long playerId, @NonNull Long videoTrackNumber);

    @NonNull 
    Long getVideoTrack(@NonNull Long playerId);

    void setVideoScale(@NonNull Long playerId, @NonNull Double scale);

    @NonNull 
    Double getVideoScale(@NonNull Long playerId);

    void setVideoAspectRatio(@NonNull Long playerId, @NonNull String aspectRatio);

    @NonNull 
    String getVideoAspectRatio(@NonNull Long playerId);

    @NonNull 
    List<String> getAvailableRendererServices(@NonNull Long playerId);

    void startRendererScanning(@NonNull Long playerId, @NonNull String rendererService);

    void stopRendererScanning(@NonNull Long playerId);

    @NonNull 
    Map<String, String> getRendererDevices(@NonNull Long playerId);

    void castToRenderer(@NonNull Long playerId, @NonNull String rendererId);

    @NonNull 
    Boolean startRecording(@NonNull Long playerId, @NonNull String saveDirectory);

    @NonNull 
    Boolean stopRecording(@NonNull Long playerId);

    /** The codec used by VlcPlayerApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `VlcPlayerApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable VlcPlayerApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable VlcPlayerApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.initialize" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.initialize();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.create" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                CreateMessage msgArg = (CreateMessage) args.get(0);
                try {
                  api.create(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.dispose" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  api.dispose(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setStreamUrl" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                SetMediaMessage msgArg = (SetMediaMessage) args.get(0);
                try {
                  api.setStreamUrl(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.play" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  api.play(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.pause" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  api.pause(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stop" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  api.stop(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.isPlaying" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Boolean output = api.isPlaying(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.isSeekable" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Boolean output = api.isSeekable(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setLooping" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Boolean isLoopingArg = (Boolean) args.get(1);
                try {
                  api.setLooping(playerIdArg, isLoopingArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.seekTo" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Long positionArg = (Long) args.get(1);
                try {
                  api.seekTo(playerIdArg, positionArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.position" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.position(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.duration" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.duration(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVolume" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Long volumeArg = (Long) args.get(1);
                try {
                  api.setVolume(playerIdArg, volumeArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVolume" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.getVolume(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setPlaybackSpeed" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Double speedArg = (Double) args.get(1);
                try {
                  api.setPlaybackSpeed(playerIdArg, speedArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getPlaybackSpeed" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Double output = api.getPlaybackSpeed(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.takeSnapshot" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  String output = api.takeSnapshot(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTracksCount" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.getSpuTracksCount(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTracks" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Map<Long, String> output = api.getSpuTracks(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setSpuTrack" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Long spuTrackNumberArg = (Long) args.get(1);
                try {
                  api.setSpuTrack(playerIdArg, spuTrackNumberArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTrack" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.getSpuTrack(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setSpuDelay" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Long delayArg = (Long) args.get(1);
                try {
                  api.setSpuDelay(playerIdArg, delayArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuDelay" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.getSpuDelay(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.addSubtitleTrack" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AddSubtitleMessage msgArg = (AddSubtitleMessage) args.get(0);
                try {
                  api.addSubtitleTrack(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTracksCount" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.getAudioTracksCount(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTracks" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Map<Long, String> output = api.getAudioTracks(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setAudioTrack" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Long audioTrackNumberArg = (Long) args.get(1);
                try {
                  api.setAudioTrack(playerIdArg, audioTrackNumberArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTrack" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.getAudioTrack(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setAudioDelay" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Long delayArg = (Long) args.get(1);
                try {
                  api.setAudioDelay(playerIdArg, delayArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioDelay" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.getAudioDelay(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.addAudioTrack" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AddAudioMessage msgArg = (AddAudioMessage) args.get(0);
                try {
                  api.addAudioTrack(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTracksCount" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.getVideoTracksCount(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTracks" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Map<Long, String> output = api.getVideoTracks(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoTrack" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Long videoTrackNumberArg = (Long) args.get(1);
                try {
                  api.setVideoTrack(playerIdArg, videoTrackNumberArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTrack" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Long output = api.getVideoTrack(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoScale" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                Double scaleArg = (Double) args.get(1);
                try {
                  api.setVideoScale(playerIdArg, scaleArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoScale" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Double output = api.getVideoScale(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoAspectRatio" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                String aspectRatioArg = (String) args.get(1);
                try {
                  api.setVideoAspectRatio(playerIdArg, aspectRatioArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoAspectRatio" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  String output = api.getVideoAspectRatio(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAvailableRendererServices" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  List<String> output = api.getAvailableRendererServices(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.startRendererScanning" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                String rendererServiceArg = (String) args.get(1);
                try {
                  api.startRendererScanning(playerIdArg, rendererServiceArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stopRendererScanning" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  api.stopRendererScanning(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getRendererDevices" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Map<String, String> output = api.getRendererDevices(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.castToRenderer" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                String rendererIdArg = (String) args.get(1);
                try {
                  api.castToRenderer(playerIdArg, rendererIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.startRecording" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                String saveDirectoryArg = (String) args.get(1);
                try {
                  Boolean output = api.startRecording(playerIdArg, saveDirectoryArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stopRecording" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long playerIdArg = (Long) args.get(0);
                try {
                  Boolean output = api.stopRecording(playerIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
