// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct CreateMessage {
  var playerId: Int64
  var uri: String
  var type: Int64
  var packageName: String? = nil
  var autoPlay: Bool
  var hwAcc: Int64? = nil
  var options: [String]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CreateMessage? {
    let playerId = pigeonVar_list[0] as! Int64
    let uri = pigeonVar_list[1] as! String
    let type = pigeonVar_list[2] as! Int64
    let packageName: String? = nilOrValue(pigeonVar_list[3])
    let autoPlay = pigeonVar_list[4] as! Bool
    let hwAcc: Int64? = nilOrValue(pigeonVar_list[5])
    let options = pigeonVar_list[6] as! [String]

    return CreateMessage(
      playerId: playerId,
      uri: uri,
      type: type,
      packageName: packageName,
      autoPlay: autoPlay,
      hwAcc: hwAcc,
      options: options
    )
  }
  func toList() -> [Any?] {
    return [
      playerId,
      uri,
      type,
      packageName,
      autoPlay,
      hwAcc,
      options,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SetMediaMessage {
  var playerId: Int64
  var uri: String
  var type: Int64
  var packageName: String? = nil
  var autoPlay: Bool
  var hwAcc: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SetMediaMessage? {
    let playerId = pigeonVar_list[0] as! Int64
    let uri = pigeonVar_list[1] as! String
    let type = pigeonVar_list[2] as! Int64
    let packageName: String? = nilOrValue(pigeonVar_list[3])
    let autoPlay = pigeonVar_list[4] as! Bool
    let hwAcc: Int64? = nilOrValue(pigeonVar_list[5])

    return SetMediaMessage(
      playerId: playerId,
      uri: uri,
      type: type,
      packageName: packageName,
      autoPlay: autoPlay,
      hwAcc: hwAcc
    )
  }
  func toList() -> [Any?] {
    return [
      playerId,
      uri,
      type,
      packageName,
      autoPlay,
      hwAcc,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SpuTracksMessage {
  var playerId: Int64
  var subtitles: [AnyHashable: Any]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SpuTracksMessage? {
    let playerId = pigeonVar_list[0] as! Int64
    let subtitles = pigeonVar_list[1] as! [AnyHashable: Any]

    return SpuTracksMessage(
      playerId: playerId,
      subtitles: subtitles
    )
  }
  func toList() -> [Any?] {
    return [
      playerId,
      subtitles,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AddSubtitleMessage {
  var playerId: Int64
  var uri: String
  var type: Int64
  var isSelected: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AddSubtitleMessage? {
    let playerId = pigeonVar_list[0] as! Int64
    let uri = pigeonVar_list[1] as! String
    let type = pigeonVar_list[2] as! Int64
    let isSelected = pigeonVar_list[3] as! Bool

    return AddSubtitleMessage(
      playerId: playerId,
      uri: uri,
      type: type,
      isSelected: isSelected
    )
  }
  func toList() -> [Any?] {
    return [
      playerId,
      uri,
      type,
      isSelected,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AddAudioMessage {
  var playerId: Int64
  var uri: String
  var type: Int64
  var isSelected: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AddAudioMessage? {
    let playerId = pigeonVar_list[0] as! Int64
    let uri = pigeonVar_list[1] as! String
    let type = pigeonVar_list[2] as! Int64
    let isSelected = pigeonVar_list[3] as! Bool

    return AddAudioMessage(
      playerId: playerId,
      uri: uri,
      type: type,
      isSelected: isSelected
    )
  }
  func toList() -> [Any?] {
    return [
      playerId,
      uri,
      type,
      isSelected,
    ]
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return CreateMessage.fromList(self.readValue() as! [Any?])
    case 130:
      return SetMediaMessage.fromList(self.readValue() as! [Any?])
    case 131:
      return SpuTracksMessage.fromList(self.readValue() as! [Any?])
    case 132:
      return AddSubtitleMessage.fromList(self.readValue() as! [Any?])
    case 133:
      return AddAudioMessage.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CreateMessage {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? SetMediaMessage {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? SpuTracksMessage {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? AddSubtitleMessage {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? AddAudioMessage {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol VlcPlayerApi {
  func initialize() throws
  func create(msg: CreateMessage) throws
  func dispose(playerId: Int64) throws
  func setStreamUrl(msg: SetMediaMessage) throws
  func play(playerId: Int64) throws
  func pause(playerId: Int64) throws
  func stop(playerId: Int64) throws
  func isPlaying(playerId: Int64) throws -> Bool
  func isSeekable(playerId: Int64) throws -> Bool
  func setLooping(playerId: Int64, isLooping: Bool) throws
  func seekTo(playerId: Int64, position: Int64) throws
  func position(playerId: Int64) throws -> Int64
  func duration(playerId: Int64) throws -> Int64
  func setVolume(playerId: Int64, volume: Int64) throws
  func getVolume(playerId: Int64) throws -> Int64
  func setPlaybackSpeed(playerId: Int64, speed: Double) throws
  func getPlaybackSpeed(playerId: Int64) throws -> Double
  func takeSnapshot(playerId: Int64) throws -> String?
  func getSpuTracksCount(playerId: Int64) throws -> Int64
  func getSpuTracks(playerId: Int64) throws -> [Int64: String]
  func setSpuTrack(playerId: Int64, spuTrackNumber: Int64) throws
  func getSpuTrack(playerId: Int64) throws -> Int64
  func setSpuDelay(playerId: Int64, delay: Int64) throws
  func getSpuDelay(playerId: Int64) throws -> Int64
  func addSubtitleTrack(msg: AddSubtitleMessage) throws
  func getAudioTracksCount(playerId: Int64) throws -> Int64
  func getAudioTracks(playerId: Int64) throws -> [Int64: String]
  func setAudioTrack(playerId: Int64, audioTrackNumber: Int64) throws
  func getAudioTrack(playerId: Int64) throws -> Int64
  func setAudioDelay(playerId: Int64, delay: Int64) throws
  func getAudioDelay(playerId: Int64) throws -> Int64
  func addAudioTrack(msg: AddAudioMessage) throws
  func getVideoTracksCount(playerId: Int64) throws -> Int64
  func getVideoTracks(playerId: Int64) throws -> [Int64: String]
  func setVideoTrack(playerId: Int64, videoTrackNumber: Int64) throws
  func getVideoTrack(playerId: Int64) throws -> Int64
  func setVideoScale(playerId: Int64, scale: Double) throws
  func getVideoScale(playerId: Int64) throws -> Double
  func setVideoAspectRatio(playerId: Int64, aspectRatio: String) throws
  func getVideoAspectRatio(playerId: Int64) throws -> String
  func getAvailableRendererServices(playerId: Int64) throws -> [String]
  func startRendererScanning(playerId: Int64, rendererService: String) throws
  func stopRendererScanning(playerId: Int64) throws
  func getRendererDevices(playerId: Int64) throws -> [String: String]
  func castToRenderer(playerId: Int64, rendererId: String) throws
  func startRecording(playerId: Int64, saveDirectory: String) throws -> Bool
  func stopRecording(playerId: Int64) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class VlcPlayerApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `VlcPlayerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: VlcPlayerApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { _, reply in
        do {
          try api.initialize()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.create\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! CreateMessage
        do {
          try api.create(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.dispose\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          try api.dispose(playerId: playerIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
    let setStreamUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setStreamUrl\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setStreamUrlChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! SetMediaMessage
        do {
          try api.setStreamUrl(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setStreamUrlChannel.setMessageHandler(nil)
    }
    let playChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.play\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          try api.play(playerId: playerIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.pause\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          try api.pause(playerId: playerIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stop\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          try api.stop(playerId: playerIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
    let isPlayingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.isPlaying\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isPlayingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.isPlaying(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isPlayingChannel.setMessageHandler(nil)
    }
    let isSeekableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.isSeekable\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isSeekableChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.isSeekable(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isSeekableChannel.setMessageHandler(nil)
    }
    let setLoopingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setLooping\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLoopingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let isLoopingArg = args[1] as! Bool
        do {
          try api.setLooping(playerId: playerIdArg, isLooping: isLoopingArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLoopingChannel.setMessageHandler(nil)
    }
    let seekToChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.seekTo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      seekToChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let positionArg = args[1] as! Int64
        do {
          try api.seekTo(playerId: playerIdArg, position: positionArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      seekToChannel.setMessageHandler(nil)
    }
    let positionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.position\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      positionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.position(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      positionChannel.setMessageHandler(nil)
    }
    let durationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.duration\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      durationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.duration(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      durationChannel.setMessageHandler(nil)
    }
    let setVolumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVolume\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setVolumeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let volumeArg = args[1] as! Int64
        do {
          try api.setVolume(playerId: playerIdArg, volume: volumeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setVolumeChannel.setMessageHandler(nil)
    }
    let getVolumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVolume\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVolumeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getVolume(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVolumeChannel.setMessageHandler(nil)
    }
    let setPlaybackSpeedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setPlaybackSpeed\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setPlaybackSpeedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let speedArg = args[1] as! Double
        do {
          try api.setPlaybackSpeed(playerId: playerIdArg, speed: speedArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setPlaybackSpeedChannel.setMessageHandler(nil)
    }
    let getPlaybackSpeedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getPlaybackSpeed\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPlaybackSpeedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getPlaybackSpeed(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getPlaybackSpeedChannel.setMessageHandler(nil)
    }
    let takeSnapshotChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.takeSnapshot\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      takeSnapshotChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.takeSnapshot(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      takeSnapshotChannel.setMessageHandler(nil)
    }
    let getSpuTracksCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTracksCount\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSpuTracksCountChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getSpuTracksCount(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSpuTracksCountChannel.setMessageHandler(nil)
    }
    let getSpuTracksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTracks\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSpuTracksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getSpuTracks(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSpuTracksChannel.setMessageHandler(nil)
    }
    let setSpuTrackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setSpuTrack\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSpuTrackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let spuTrackNumberArg = args[1] as! Int64
        do {
          try api.setSpuTrack(playerId: playerIdArg, spuTrackNumber: spuTrackNumberArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSpuTrackChannel.setMessageHandler(nil)
    }
    let getSpuTrackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTrack\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSpuTrackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getSpuTrack(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSpuTrackChannel.setMessageHandler(nil)
    }
    let setSpuDelayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setSpuDelay\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSpuDelayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let delayArg = args[1] as! Int64
        do {
          try api.setSpuDelay(playerId: playerIdArg, delay: delayArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSpuDelayChannel.setMessageHandler(nil)
    }
    let getSpuDelayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuDelay\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSpuDelayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getSpuDelay(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSpuDelayChannel.setMessageHandler(nil)
    }
    let addSubtitleTrackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.addSubtitleTrack\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addSubtitleTrackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! AddSubtitleMessage
        do {
          try api.addSubtitleTrack(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addSubtitleTrackChannel.setMessageHandler(nil)
    }
    let getAudioTracksCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTracksCount\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAudioTracksCountChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getAudioTracksCount(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAudioTracksCountChannel.setMessageHandler(nil)
    }
    let getAudioTracksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTracks\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAudioTracksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getAudioTracks(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAudioTracksChannel.setMessageHandler(nil)
    }
    let setAudioTrackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setAudioTrack\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAudioTrackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let audioTrackNumberArg = args[1] as! Int64
        do {
          try api.setAudioTrack(playerId: playerIdArg, audioTrackNumber: audioTrackNumberArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAudioTrackChannel.setMessageHandler(nil)
    }
    let getAudioTrackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTrack\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAudioTrackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getAudioTrack(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAudioTrackChannel.setMessageHandler(nil)
    }
    let setAudioDelayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setAudioDelay\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAudioDelayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let delayArg = args[1] as! Int64
        do {
          try api.setAudioDelay(playerId: playerIdArg, delay: delayArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAudioDelayChannel.setMessageHandler(nil)
    }
    let getAudioDelayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioDelay\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAudioDelayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getAudioDelay(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAudioDelayChannel.setMessageHandler(nil)
    }
    let addAudioTrackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.addAudioTrack\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addAudioTrackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! AddAudioMessage
        do {
          try api.addAudioTrack(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addAudioTrackChannel.setMessageHandler(nil)
    }
    let getVideoTracksCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTracksCount\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVideoTracksCountChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getVideoTracksCount(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVideoTracksCountChannel.setMessageHandler(nil)
    }
    let getVideoTracksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTracks\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVideoTracksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getVideoTracks(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVideoTracksChannel.setMessageHandler(nil)
    }
    let setVideoTrackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoTrack\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setVideoTrackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let videoTrackNumberArg = args[1] as! Int64
        do {
          try api.setVideoTrack(playerId: playerIdArg, videoTrackNumber: videoTrackNumberArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setVideoTrackChannel.setMessageHandler(nil)
    }
    let getVideoTrackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTrack\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVideoTrackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getVideoTrack(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVideoTrackChannel.setMessageHandler(nil)
    }
    let setVideoScaleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoScale\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setVideoScaleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let scaleArg = args[1] as! Double
        do {
          try api.setVideoScale(playerId: playerIdArg, scale: scaleArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setVideoScaleChannel.setMessageHandler(nil)
    }
    let getVideoScaleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoScale\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVideoScaleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getVideoScale(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVideoScaleChannel.setMessageHandler(nil)
    }
    let setVideoAspectRatioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoAspectRatio\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setVideoAspectRatioChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let aspectRatioArg = args[1] as! String
        do {
          try api.setVideoAspectRatio(playerId: playerIdArg, aspectRatio: aspectRatioArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setVideoAspectRatioChannel.setMessageHandler(nil)
    }
    let getVideoAspectRatioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoAspectRatio\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVideoAspectRatioChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getVideoAspectRatio(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVideoAspectRatioChannel.setMessageHandler(nil)
    }
    let getAvailableRendererServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAvailableRendererServices\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAvailableRendererServicesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getAvailableRendererServices(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAvailableRendererServicesChannel.setMessageHandler(nil)
    }
    let startRendererScanningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.startRendererScanning\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startRendererScanningChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let rendererServiceArg = args[1] as! String
        do {
          try api.startRendererScanning(playerId: playerIdArg, rendererService: rendererServiceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startRendererScanningChannel.setMessageHandler(nil)
    }
    let stopRendererScanningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stopRendererScanning\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopRendererScanningChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          try api.stopRendererScanning(playerId: playerIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopRendererScanningChannel.setMessageHandler(nil)
    }
    let getRendererDevicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getRendererDevices\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getRendererDevicesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.getRendererDevices(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getRendererDevicesChannel.setMessageHandler(nil)
    }
    let castToRendererChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.castToRenderer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      castToRendererChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let rendererIdArg = args[1] as! String
        do {
          try api.castToRenderer(playerId: playerIdArg, rendererId: rendererIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      castToRendererChannel.setMessageHandler(nil)
    }
    let startRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.startRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startRecordingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        let saveDirectoryArg = args[1] as! String
        do {
          let result = try api.startRecording(playerId: playerIdArg, saveDirectory: saveDirectoryArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startRecordingChannel.setMessageHandler(nil)
    }
    let stopRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stopRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopRecordingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let playerIdArg = args[0] as! Int64
        do {
          let result = try api.stopRecording(playerId: playerIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopRecordingChannel.setMessageHandler(nil)
    }
  }
}
