// Autogenerated from Pigeon (v0.1.17), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface CreateMessage ()
+(CreateMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface TextureMessage ()
+(TextureMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface SetMediaMessage ()
+(SetMediaMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface BooleanMessage ()
+(BooleanMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface LoopingMessage ()
+(LoopingMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PositionMessage ()
+(PositionMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface DurationMessage ()
+(DurationMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface VolumeMessage ()
+(VolumeMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PlaybackSpeedMessage ()
+(PlaybackSpeedMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface SnapshotMessage ()
+(SnapshotMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface TrackCountMessage ()
+(TrackCountMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface SpuTracksMessage ()
+(SpuTracksMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface SpuTrackMessage ()
+(SpuTrackMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface DelayMessage ()
+(DelayMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface AddSubtitleMessage ()
+(AddSubtitleMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface AudioTracksMessage ()
+(AudioTracksMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface AudioTrackMessage ()
+(AudioTrackMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface AddAudioMessage ()
+(AddAudioMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface VideoTracksMessage ()
+(VideoTracksMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface VideoTrackMessage ()
+(VideoTrackMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface VideoScaleMessage ()
+(VideoScaleMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface VideoAspectRatioMessage ()
+(VideoAspectRatioMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface RendererServicesMessage ()
+(RendererServicesMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface RendererScanningMessage ()
+(RendererScanningMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface RendererDevicesMessage ()
+(RendererDevicesMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface RenderDeviceMessage ()
+(RenderDeviceMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation CreateMessage
+(CreateMessage*)fromMap:(NSDictionary*)dict {
  CreateMessage* result = [[CreateMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.uri = dict[@"uri"];
  if ((NSNull *)result.uri == [NSNull null]) {
    result.uri = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.packageName = dict[@"packageName"];
  if ((NSNull *)result.packageName == [NSNull null]) {
    result.packageName = nil;
  }
  result.autoPlay = dict[@"autoPlay"];
  if ((NSNull *)result.autoPlay == [NSNull null]) {
    result.autoPlay = nil;
  }
  result.hwAcc = dict[@"hwAcc"];
  if ((NSNull *)result.hwAcc == [NSNull null]) {
    result.hwAcc = nil;
  }
  result.options = dict[@"options"];
  if ((NSNull *)result.options == [NSNull null]) {
    result.options = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.uri ? self.uri : [NSNull null]), @"uri", (self.type ? self.type : [NSNull null]), @"type", (self.packageName ? self.packageName : [NSNull null]), @"packageName", (self.autoPlay ? self.autoPlay : [NSNull null]), @"autoPlay", (self.hwAcc ? self.hwAcc : [NSNull null]), @"hwAcc", (self.options ? self.options : [NSNull null]), @"options", nil];
}
@end

@implementation TextureMessage
+(TextureMessage*)fromMap:(NSDictionary*)dict {
  TextureMessage* result = [[TextureMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", nil];
}
@end

@implementation SetMediaMessage
+(SetMediaMessage*)fromMap:(NSDictionary*)dict {
  SetMediaMessage* result = [[SetMediaMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.uri = dict[@"uri"];
  if ((NSNull *)result.uri == [NSNull null]) {
    result.uri = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.packageName = dict[@"packageName"];
  if ((NSNull *)result.packageName == [NSNull null]) {
    result.packageName = nil;
  }
  result.autoPlay = dict[@"autoPlay"];
  if ((NSNull *)result.autoPlay == [NSNull null]) {
    result.autoPlay = nil;
  }
  result.hwAcc = dict[@"hwAcc"];
  if ((NSNull *)result.hwAcc == [NSNull null]) {
    result.hwAcc = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.uri ? self.uri : [NSNull null]), @"uri", (self.type ? self.type : [NSNull null]), @"type", (self.packageName ? self.packageName : [NSNull null]), @"packageName", (self.autoPlay ? self.autoPlay : [NSNull null]), @"autoPlay", (self.hwAcc ? self.hwAcc : [NSNull null]), @"hwAcc", nil];
}
@end

@implementation BooleanMessage
+(BooleanMessage*)fromMap:(NSDictionary*)dict {
  BooleanMessage* result = [[BooleanMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.result = dict[@"result"];
  if ((NSNull *)result.result == [NSNull null]) {
    result.result = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.result ? self.result : [NSNull null]), @"result", nil];
}
@end

@implementation LoopingMessage
+(LoopingMessage*)fromMap:(NSDictionary*)dict {
  LoopingMessage* result = [[LoopingMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.isLooping = dict[@"isLooping"];
  if ((NSNull *)result.isLooping == [NSNull null]) {
    result.isLooping = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.isLooping ? self.isLooping : [NSNull null]), @"isLooping", nil];
}
@end

@implementation PositionMessage
+(PositionMessage*)fromMap:(NSDictionary*)dict {
  PositionMessage* result = [[PositionMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.position = dict[@"position"];
  if ((NSNull *)result.position == [NSNull null]) {
    result.position = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.position ? self.position : [NSNull null]), @"position", nil];
}
@end

@implementation DurationMessage
+(DurationMessage*)fromMap:(NSDictionary*)dict {
  DurationMessage* result = [[DurationMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.duration = dict[@"duration"];
  if ((NSNull *)result.duration == [NSNull null]) {
    result.duration = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.duration ? self.duration : [NSNull null]), @"duration", nil];
}
@end

@implementation VolumeMessage
+(VolumeMessage*)fromMap:(NSDictionary*)dict {
  VolumeMessage* result = [[VolumeMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.volume = dict[@"volume"];
  if ((NSNull *)result.volume == [NSNull null]) {
    result.volume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation PlaybackSpeedMessage
+(PlaybackSpeedMessage*)fromMap:(NSDictionary*)dict {
  PlaybackSpeedMessage* result = [[PlaybackSpeedMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.speed = dict[@"speed"];
  if ((NSNull *)result.speed == [NSNull null]) {
    result.speed = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.speed ? self.speed : [NSNull null]), @"speed", nil];
}
@end

@implementation SnapshotMessage
+(SnapshotMessage*)fromMap:(NSDictionary*)dict {
  SnapshotMessage* result = [[SnapshotMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.snapshot = dict[@"snapshot"];
  if ((NSNull *)result.snapshot == [NSNull null]) {
    result.snapshot = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.snapshot ? self.snapshot : [NSNull null]), @"snapshot", nil];
}
@end

@implementation TrackCountMessage
+(TrackCountMessage*)fromMap:(NSDictionary*)dict {
  TrackCountMessage* result = [[TrackCountMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.count = dict[@"count"];
  if ((NSNull *)result.count == [NSNull null]) {
    result.count = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.count ? self.count : [NSNull null]), @"count", nil];
}
@end

@implementation SpuTracksMessage
+(SpuTracksMessage*)fromMap:(NSDictionary*)dict {
  SpuTracksMessage* result = [[SpuTracksMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.subtitles = dict[@"subtitles"];
  if ((NSNull *)result.subtitles == [NSNull null]) {
    result.subtitles = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.subtitles ? self.subtitles : [NSNull null]), @"subtitles", nil];
}
@end

@implementation SpuTrackMessage
+(SpuTrackMessage*)fromMap:(NSDictionary*)dict {
  SpuTrackMessage* result = [[SpuTrackMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.spuTrackNumber = dict[@"spuTrackNumber"];
  if ((NSNull *)result.spuTrackNumber == [NSNull null]) {
    result.spuTrackNumber = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.spuTrackNumber ? self.spuTrackNumber : [NSNull null]), @"spuTrackNumber", nil];
}
@end

@implementation DelayMessage
+(DelayMessage*)fromMap:(NSDictionary*)dict {
  DelayMessage* result = [[DelayMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.delay = dict[@"delay"];
  if ((NSNull *)result.delay == [NSNull null]) {
    result.delay = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.delay ? self.delay : [NSNull null]), @"delay", nil];
}
@end

@implementation AddSubtitleMessage
+(AddSubtitleMessage*)fromMap:(NSDictionary*)dict {
  AddSubtitleMessage* result = [[AddSubtitleMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.uri = dict[@"uri"];
  if ((NSNull *)result.uri == [NSNull null]) {
    result.uri = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.isSelected = dict[@"isSelected"];
  if ((NSNull *)result.isSelected == [NSNull null]) {
    result.isSelected = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.uri ? self.uri : [NSNull null]), @"uri", (self.type ? self.type : [NSNull null]), @"type", (self.isSelected ? self.isSelected : [NSNull null]), @"isSelected", nil];
}
@end

@implementation AudioTracksMessage
+(AudioTracksMessage*)fromMap:(NSDictionary*)dict {
  AudioTracksMessage* result = [[AudioTracksMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.audios = dict[@"audios"];
  if ((NSNull *)result.audios == [NSNull null]) {
    result.audios = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.audios ? self.audios : [NSNull null]), @"audios", nil];
}
@end

@implementation AudioTrackMessage
+(AudioTrackMessage*)fromMap:(NSDictionary*)dict {
  AudioTrackMessage* result = [[AudioTrackMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.audioTrackNumber = dict[@"audioTrackNumber"];
  if ((NSNull *)result.audioTrackNumber == [NSNull null]) {
    result.audioTrackNumber = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.audioTrackNumber ? self.audioTrackNumber : [NSNull null]), @"audioTrackNumber", nil];
}
@end

@implementation AddAudioMessage
+(AddAudioMessage*)fromMap:(NSDictionary*)dict {
  AddAudioMessage* result = [[AddAudioMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.uri = dict[@"uri"];
  if ((NSNull *)result.uri == [NSNull null]) {
    result.uri = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.isSelected = dict[@"isSelected"];
  if ((NSNull *)result.isSelected == [NSNull null]) {
    result.isSelected = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.uri ? self.uri : [NSNull null]), @"uri", (self.type ? self.type : [NSNull null]), @"type", (self.isSelected ? self.isSelected : [NSNull null]), @"isSelected", nil];
}
@end

@implementation VideoTracksMessage
+(VideoTracksMessage*)fromMap:(NSDictionary*)dict {
  VideoTracksMessage* result = [[VideoTracksMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.videos = dict[@"videos"];
  if ((NSNull *)result.videos == [NSNull null]) {
    result.videos = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.videos ? self.videos : [NSNull null]), @"videos", nil];
}
@end

@implementation VideoTrackMessage
+(VideoTrackMessage*)fromMap:(NSDictionary*)dict {
  VideoTrackMessage* result = [[VideoTrackMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.videoTrackNumber = dict[@"videoTrackNumber"];
  if ((NSNull *)result.videoTrackNumber == [NSNull null]) {
    result.videoTrackNumber = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.videoTrackNumber ? self.videoTrackNumber : [NSNull null]), @"videoTrackNumber", nil];
}
@end

@implementation VideoScaleMessage
+(VideoScaleMessage*)fromMap:(NSDictionary*)dict {
  VideoScaleMessage* result = [[VideoScaleMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.scale = dict[@"scale"];
  if ((NSNull *)result.scale == [NSNull null]) {
    result.scale = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.scale ? self.scale : [NSNull null]), @"scale", nil];
}
@end

@implementation VideoAspectRatioMessage
+(VideoAspectRatioMessage*)fromMap:(NSDictionary*)dict {
  VideoAspectRatioMessage* result = [[VideoAspectRatioMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.aspectRatio = dict[@"aspectRatio"];
  if ((NSNull *)result.aspectRatio == [NSNull null]) {
    result.aspectRatio = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.aspectRatio ? self.aspectRatio : [NSNull null]), @"aspectRatio", nil];
}
@end

@implementation RendererServicesMessage
+(RendererServicesMessage*)fromMap:(NSDictionary*)dict {
  RendererServicesMessage* result = [[RendererServicesMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.services = dict[@"services"];
  if ((NSNull *)result.services == [NSNull null]) {
    result.services = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.services ? self.services : [NSNull null]), @"services", nil];
}
@end

@implementation RendererScanningMessage
+(RendererScanningMessage*)fromMap:(NSDictionary*)dict {
  RendererScanningMessage* result = [[RendererScanningMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.rendererService = dict[@"rendererService"];
  if ((NSNull *)result.rendererService == [NSNull null]) {
    result.rendererService = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.rendererService ? self.rendererService : [NSNull null]), @"rendererService", nil];
}
@end

@implementation RendererDevicesMessage
+(RendererDevicesMessage*)fromMap:(NSDictionary*)dict {
  RendererDevicesMessage* result = [[RendererDevicesMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.rendererDevices = dict[@"rendererDevices"];
  if ((NSNull *)result.rendererDevices == [NSNull null]) {
    result.rendererDevices = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.rendererDevices ? self.rendererDevices : [NSNull null]), @"rendererDevices", nil];
}
@end

@implementation RenderDeviceMessage
+(RenderDeviceMessage*)fromMap:(NSDictionary*)dict {
  RenderDeviceMessage* result = [[RenderDeviceMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.rendererDevice = dict[@"rendererDevice"];
  if ((NSNull *)result.rendererDevice == [NSNull null]) {
    result.rendererDevice = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.rendererDevice ? self.rendererDevice : [NSNull null]), @"rendererDevice", nil];
}
@end

void VlcPlayerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<VlcPlayerApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.initialize"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api initialize:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.create"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        CreateMessage *input = [CreateMessage fromMap:message];
        [api create:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.dispose"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        [api dispose:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setStreamUrl"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        SetMediaMessage *input = [SetMediaMessage fromMap:message];
        [api setStreamUrl:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.play"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        [api play:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.pause"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        [api pause:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.stop"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        [api stop:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.isPlaying"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        BooleanMessage *output = [api isPlaying:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setLooping"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        LoopingMessage *input = [LoopingMessage fromMap:message];
        [api setLooping:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.seekTo"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        PositionMessage *input = [PositionMessage fromMap:message];
        [api seekTo:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.position"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        PositionMessage *output = [api position:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.duration"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        DurationMessage *output = [api duration:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        VolumeMessage *input = [VolumeMessage fromMap:message];
        [api setVolume:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        VolumeMessage *output = [api getVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setPlaybackSpeed"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        PlaybackSpeedMessage *input = [PlaybackSpeedMessage fromMap:message];
        [api setPlaybackSpeed:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getPlaybackSpeed"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        PlaybackSpeedMessage *output = [api getPlaybackSpeed:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.takeSnapshot"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        SnapshotMessage *output = [api takeSnapshot:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getSpuTracksCount"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        TrackCountMessage *output = [api getSpuTracksCount:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getSpuTracks"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        SpuTracksMessage *output = [api getSpuTracks:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setSpuTrack"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        SpuTrackMessage *input = [SpuTrackMessage fromMap:message];
        [api setSpuTrack:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getSpuTrack"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        SpuTrackMessage *output = [api getSpuTrack:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setSpuDelay"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        DelayMessage *input = [DelayMessage fromMap:message];
        [api setSpuDelay:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getSpuDelay"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        DelayMessage *output = [api getSpuDelay:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.addSubtitleTrack"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        AddSubtitleMessage *input = [AddSubtitleMessage fromMap:message];
        [api addSubtitleTrack:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getAudioTracksCount"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        TrackCountMessage *output = [api getAudioTracksCount:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getAudioTracks"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        AudioTracksMessage *output = [api getAudioTracks:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setAudioTrack"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        AudioTrackMessage *input = [AudioTrackMessage fromMap:message];
        [api setAudioTrack:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getAudioTrack"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        AudioTrackMessage *output = [api getAudioTrack:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setAudioDelay"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        DelayMessage *input = [DelayMessage fromMap:message];
        [api setAudioDelay:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getAudioDelay"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        DelayMessage *output = [api getAudioDelay:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.addAudioTrack"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        AddAudioMessage *input = [AddAudioMessage fromMap:message];
        [api addAudioTrack:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getVideoTracksCount"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        TrackCountMessage *output = [api getVideoTracksCount:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getVideoTracks"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        VideoTracksMessage *output = [api getVideoTracks:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setVideoTrack"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        VideoTrackMessage *input = [VideoTrackMessage fromMap:message];
        [api setVideoTrack:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getVideoTrack"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        VideoTrackMessage *output = [api getVideoTrack:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setVideoScale"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        VideoScaleMessage *input = [VideoScaleMessage fromMap:message];
        [api setVideoScale:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getVideoScale"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        VideoScaleMessage *output = [api getVideoScale:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.setVideoAspectRatio"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        VideoAspectRatioMessage *input = [VideoAspectRatioMessage fromMap:message];
        [api setVideoAspectRatio:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getVideoAspectRatio"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        VideoAspectRatioMessage *output = [api getVideoAspectRatio:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getAvailableRendererServices"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        RendererServicesMessage *output = [api getAvailableRendererServices:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.startRendererScanning"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        RendererScanningMessage *input = [RendererScanningMessage fromMap:message];
        [api startRendererScanning:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.stopRendererScanning"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        [api stopRendererScanning:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.getRendererDevices"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        TextureMessage *input = [TextureMessage fromMap:message];
        RendererDevicesMessage *output = [api getRendererDevices:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VlcPlayerApi.castToRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        RenderDeviceMessage *input = [RenderDeviceMessage fromMap:message];
        [api castToRenderer:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
