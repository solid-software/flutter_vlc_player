// Autogenerated from Pigeon (v0.2.0-nullsafety.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class CreateMessage {
  int? textureId;
  String? uri;
  int? type;
  String? packageName;
  bool? autoPlay;
  int? hwAcc;
  List<Object?>? options;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['packageName'] = packageName;
    pigeonMap['autoPlay'] = autoPlay;
    pigeonMap['hwAcc'] = hwAcc;
    pigeonMap['options'] = options;
    return pigeonMap;
  }

  static CreateMessage decode(Object? message) {
    if (message == null) {
      return CreateMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return CreateMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..uri = pigeonMap['uri'] as String?
      ..type = pigeonMap['type'] as int?
      ..packageName = pigeonMap['packageName'] as String?
      ..autoPlay = pigeonMap['autoPlay'] as bool?
      ..hwAcc = pigeonMap['hwAcc'] as int?
      ..options = pigeonMap['options'] as List<Object?>?;
  }
}

class TextureMessage {
  int? textureId;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    return pigeonMap;
  }

  static TextureMessage decode(Object? message) {
    if (message == null) {
      return TextureMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return TextureMessage()..textureId = pigeonMap['textureId'] as int?;
  }
}

class SetMediaMessage {
  int? textureId;
  String? uri;
  int? type;
  String? packageName;
  bool? autoPlay;
  int? hwAcc;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['packageName'] = packageName;
    pigeonMap['autoPlay'] = autoPlay;
    pigeonMap['hwAcc'] = hwAcc;
    return pigeonMap;
  }

  static SetMediaMessage decode(Object? message) {
    if (message == null) {
      return SetMediaMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return SetMediaMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..uri = pigeonMap['uri'] as String?
      ..type = pigeonMap['type'] as int?
      ..packageName = pigeonMap['packageName'] as String?
      ..autoPlay = pigeonMap['autoPlay'] as bool?
      ..hwAcc = pigeonMap['hwAcc'] as int?;
  }
}

class BooleanMessage {
  int? textureId;
  bool? result;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['result'] = result;
    return pigeonMap;
  }

  static BooleanMessage decode(Object? message) {
    if (message == null) {
      return BooleanMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return BooleanMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..result = pigeonMap['result'] as bool?;
  }
}

class LoopingMessage {
  int? textureId;
  bool? isLooping;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['isLooping'] = isLooping;
    return pigeonMap;
  }

  static LoopingMessage decode(Object? message) {
    if (message == null) {
      return LoopingMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return LoopingMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..isLooping = pigeonMap['isLooping'] as bool?;
  }
}

class PositionMessage {
  int? textureId;
  int? position;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['position'] = position;
    return pigeonMap;
  }

  static PositionMessage decode(Object? message) {
    if (message == null) {
      return PositionMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return PositionMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..position = pigeonMap['position'] as int?;
  }
}

class DurationMessage {
  int? textureId;
  int? duration;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['duration'] = duration;
    return pigeonMap;
  }

  static DurationMessage decode(Object? message) {
    if (message == null) {
      return DurationMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return DurationMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..duration = pigeonMap['duration'] as int?;
  }
}

class VolumeMessage {
  int? textureId;
  int? volume;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['volume'] = volume;
    return pigeonMap;
  }

  static VolumeMessage decode(Object? message) {
    if (message == null) {
      return VolumeMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return VolumeMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..volume = pigeonMap['volume'] as int?;
  }
}

class PlaybackSpeedMessage {
  int? textureId;
  double? speed;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['speed'] = speed;
    return pigeonMap;
  }

  static PlaybackSpeedMessage decode(Object? message) {
    if (message == null) {
      return PlaybackSpeedMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return PlaybackSpeedMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..speed = pigeonMap['speed'] as double?;
  }
}

class SnapshotMessage {
  int? textureId;
  String? snapshot;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['snapshot'] = snapshot;
    return pigeonMap;
  }

  static SnapshotMessage decode(Object? message) {
    if (message == null) {
      return SnapshotMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return SnapshotMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..snapshot = pigeonMap['snapshot'] as String?;
  }
}

class TrackCountMessage {
  int? textureId;
  int? count;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['count'] = count;
    return pigeonMap;
  }

  static TrackCountMessage decode(Object? message) {
    if (message == null) {
      return TrackCountMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return TrackCountMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..count = pigeonMap['count'] as int?;
  }
}

class SpuTracksMessage {
  int? textureId;
  Map<Object?, Object?>? subtitles;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['subtitles'] = subtitles;
    return pigeonMap;
  }

  static SpuTracksMessage decode(Object? message) {
    if (message == null) {
      return SpuTracksMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return SpuTracksMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..subtitles = pigeonMap['subtitles'] as Map<Object?, Object?>?;
  }
}

class SpuTrackMessage {
  int? textureId;
  int? spuTrackNumber;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['spuTrackNumber'] = spuTrackNumber;
    return pigeonMap;
  }

  static SpuTrackMessage decode(Object? message) {
    if (message == null) {
      return SpuTrackMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return SpuTrackMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..spuTrackNumber = pigeonMap['spuTrackNumber'] as int?;
  }
}

class DelayMessage {
  int? textureId;
  int? delay;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['delay'] = delay;
    return pigeonMap;
  }

  static DelayMessage decode(Object? message) {
    if (message == null) {
      return DelayMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return DelayMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..delay = pigeonMap['delay'] as int?;
  }
}

class AddSubtitleMessage {
  int? textureId;
  String? uri;
  int? type;
  bool? isSelected;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['isSelected'] = isSelected;
    return pigeonMap;
  }

  static AddSubtitleMessage decode(Object? message) {
    if (message == null) {
      return AddSubtitleMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return AddSubtitleMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..uri = pigeonMap['uri'] as String?
      ..type = pigeonMap['type'] as int?
      ..isSelected = pigeonMap['isSelected'] as bool?;
  }
}

class AudioTracksMessage {
  int? textureId;
  Map<Object?, Object?>? audios;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['audios'] = audios;
    return pigeonMap;
  }

  static AudioTracksMessage decode(Object? message) {
    if (message == null) {
      return AudioTracksMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return AudioTracksMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..audios = pigeonMap['audios'] as Map<Object?, Object?>?;
  }
}

class AudioTrackMessage {
  int? textureId;
  int? audioTrackNumber;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['audioTrackNumber'] = audioTrackNumber;
    return pigeonMap;
  }

  static AudioTrackMessage decode(Object? message) {
    if (message == null) {
      return AudioTrackMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return AudioTrackMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..audioTrackNumber = pigeonMap['audioTrackNumber'] as int?;
  }
}

class AddAudioMessage {
  int? textureId;
  String? uri;
  int? type;
  bool? isSelected;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['isSelected'] = isSelected;
    return pigeonMap;
  }

  static AddAudioMessage decode(Object? message) {
    if (message == null) {
      return AddAudioMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return AddAudioMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..uri = pigeonMap['uri'] as String?
      ..type = pigeonMap['type'] as int?
      ..isSelected = pigeonMap['isSelected'] as bool?;
  }
}

class VideoTracksMessage {
  int? textureId;
  Map<Object?, Object?>? videos;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['videos'] = videos;
    return pigeonMap;
  }

  static VideoTracksMessage decode(Object? message) {
    if (message == null) {
      return VideoTracksMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return VideoTracksMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..videos = pigeonMap['videos'] as Map<Object?, Object?>?;
  }
}

class VideoTrackMessage {
  int? textureId;
  int? videoTrackNumber;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['videoTrackNumber'] = videoTrackNumber;
    return pigeonMap;
  }

  static VideoTrackMessage decode(Object? message) {
    if (message == null) {
      return VideoTrackMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return VideoTrackMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..videoTrackNumber = pigeonMap['videoTrackNumber'] as int?;
  }
}

class VideoScaleMessage {
  int? textureId;
  double? scale;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['scale'] = scale;
    return pigeonMap;
  }

  static VideoScaleMessage decode(Object? message) {
    if (message == null) {
      return VideoScaleMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return VideoScaleMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..scale = pigeonMap['scale'] as double?;
  }
}

class VideoAspectRatioMessage {
  int? textureId;
  String? aspectRatio;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['aspectRatio'] = aspectRatio;
    return pigeonMap;
  }

  static VideoAspectRatioMessage decode(Object? message) {
    if (message == null) {
      return VideoAspectRatioMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return VideoAspectRatioMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..aspectRatio = pigeonMap['aspectRatio'] as String?;
  }
}

class RendererServicesMessage {
  int? textureId;
  List<Object?>? services;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['services'] = services;
    return pigeonMap;
  }

  static RendererServicesMessage decode(Object? message) {
    if (message == null) {
      return RendererServicesMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return RendererServicesMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..services = pigeonMap['services'] as List<Object?>?;
  }
}

class RendererScanningMessage {
  int? textureId;
  String? rendererService;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['rendererService'] = rendererService;
    return pigeonMap;
  }

  static RendererScanningMessage decode(Object? message) {
    if (message == null) {
      return RendererScanningMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return RendererScanningMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..rendererService = pigeonMap['rendererService'] as String?;
  }
}

class RendererDevicesMessage {
  int? textureId;
  Map<Object?, Object?>? rendererDevices;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['rendererDevices'] = rendererDevices;
    return pigeonMap;
  }

  static RendererDevicesMessage decode(Object? message) {
    if (message == null) {
      return RendererDevicesMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return RendererDevicesMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..rendererDevices =
          pigeonMap['rendererDevices'] as Map<Object?, Object?>?;
  }
}

class RenderDeviceMessage {
  int? textureId;
  String? rendererDevice;

  Object encode() {
    final pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['rendererDevice'] = rendererDevice;
    return pigeonMap;
  }

  static RenderDeviceMessage decode(Object? message) {
    if (message == null) {
      return RenderDeviceMessage();
    }
    final pigeonMap = message as Map<Object?, Object?>;
    return RenderDeviceMessage()
      ..textureId = pigeonMap['textureId'] as int?
      ..rendererDevice = pigeonMap['rendererDevice'] as String?;
  }
}

class VlcPlayerApi {
  Future<void> initialize() async {
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.initialize', StandardMessageCodec());
    final replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> create(CreateMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.create', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> dispose(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.dispose', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setStreamUrl(SetMediaMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setStreamUrl', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> play(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.play', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> pause(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.pause', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> stop(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.stop', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<BooleanMessage> isPlaying(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.isPlaying', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return BooleanMessage.decode(replyMap['result']!);
    }
  }

  Future<BooleanMessage> isSeekable(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.isSeekable', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return BooleanMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setLooping(LoopingMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setLooping', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> seekTo(PositionMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.seekTo', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<PositionMessage> position(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.position', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return PositionMessage.decode(replyMap['result']!);
    }
  }

  Future<DurationMessage> duration(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.duration', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return DurationMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setVolume(VolumeMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setVolume', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<VolumeMessage> getVolume(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getVolume', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VolumeMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setPlaybackSpeed(PlaybackSpeedMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setPlaybackSpeed',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<PlaybackSpeedMessage> getPlaybackSpeed(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getPlaybackSpeed',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return PlaybackSpeedMessage.decode(replyMap['result']!);
    }
  }

  Future<SnapshotMessage> takeSnapshot(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.takeSnapshot', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return SnapshotMessage.decode(replyMap['result']!);
    }
  }

  Future<TrackCountMessage> getSpuTracksCount(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getSpuTracksCount',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return TrackCountMessage.decode(replyMap['result']!);
    }
  }

  Future<SpuTracksMessage> getSpuTracks(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getSpuTracks', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return SpuTracksMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setSpuTrack(SpuTrackMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setSpuTrack', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<SpuTrackMessage> getSpuTrack(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getSpuTrack', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return SpuTrackMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setSpuDelay(DelayMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setSpuDelay', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<DelayMessage> getSpuDelay(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getSpuDelay', StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return DelayMessage.decode(replyMap['result']!);
    }
  }

  Future<void> addSubtitleTrack(AddSubtitleMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.addSubtitleTrack',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<TrackCountMessage> getAudioTracksCount(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getAudioTracksCount',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return TrackCountMessage.decode(replyMap['result']!);
    }
  }

  Future<AudioTracksMessage> getAudioTracks(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getAudioTracks',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return AudioTracksMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setAudioTrack(AudioTrackMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setAudioTrack',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<AudioTrackMessage> getAudioTrack(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getAudioTrack',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return AudioTrackMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setAudioDelay(DelayMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setAudioDelay',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<DelayMessage> getAudioDelay(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getAudioDelay',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return DelayMessage.decode(replyMap['result']!);
    }
  }

  Future<void> addAudioTrack(AddAudioMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.addAudioTrack',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<TrackCountMessage> getVideoTracksCount(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getVideoTracksCount',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return TrackCountMessage.decode(replyMap['result']!);
    }
  }

  Future<VideoTracksMessage> getVideoTracks(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getVideoTracks',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VideoTracksMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setVideoTrack(VideoTrackMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setVideoTrack',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<VideoTrackMessage> getVideoTrack(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getVideoTrack',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VideoTrackMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setVideoScale(VideoScaleMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setVideoScale',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<VideoScaleMessage> getVideoScale(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getVideoScale',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VideoScaleMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setVideoAspectRatio(VideoAspectRatioMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.setVideoAspectRatio',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<VideoAspectRatioMessage> getVideoAspectRatio(
      TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getVideoAspectRatio',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VideoAspectRatioMessage.decode(replyMap['result']!);
    }
  }

  Future<RendererServicesMessage> getAvailableRendererServices(
      TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getAvailableRendererServices',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return RendererServicesMessage.decode(replyMap['result']!);
    }
  }

  Future<void> startRendererScanning(RendererScanningMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.startRendererScanning',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> stopRendererScanning(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.stopRendererScanning',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<RendererDevicesMessage> getRendererDevices(TextureMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.getRendererDevices',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return RendererDevicesMessage.decode(replyMap['result']!);
    }
  }

  Future<void> castToRenderer(RenderDeviceMessage arg) async {
    final encoded = arg.encode();
    const channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VlcPlayerApi.castToRenderer',
        StandardMessageCodec());
    final replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final error = replyMap['error']! as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String? ?? 'unknown',
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}
